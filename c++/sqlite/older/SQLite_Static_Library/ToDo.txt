		--
		
		Now John says try "sqlite.org", it looks sweet.
		E:\Software Development\sqlite-source-3_3_13
		
		Where are the damned C++ wrappers?
		
		   http://sourceforge.net/projects/sharplite/
		      E:\Software Development\sharplite
		      
		   http://sourceforge.net/projects/smartdb/
		      E:\Software Development\SmartDB
		   
		rrr... they all look like crap...
		i guess I should try them out tho...
		or keep going with ObjectStream?
		   my code has always been the best to work with, IMHO of course...
		   but I can't compete with the toolkits that are out here...
		   
	   John: try this wrapper:
	      http://www.codeproject.com/database/CppSQLite.asp
	      
	   I also posted notes on how to build sqlite in Visual Studio 2005 to the sqlite wiki:
	      http://www.sqlite.org/cvstrac/wiki
	      
	      (and to news.tdm: Using sqlite with Visual Studio 2005)
	      
	      errr, not quite there yet
	      
	      converted Arke's project to VS8
	      used it to build the sqlite dll
	      changed the project config from dll to static library
	      rebuilt
	      used the lib in HangTheDJ, along with CppSQLite wrapper
	      
	      next: update MY sqlite project...
	         tdm_cvs_view\SQLite_Static_Library\SQLite_Static_Library\SQLite_Static_Library.vcproj
	      to match the converted project...
	         E:\Software Development\sqlite-Arke\sqlite-3.3.7\Sqlite-3.3.7.vcproj
	      
	      ALSO MAY NEED TO DIFF THE SOURCE CODE!!
	         
	      doing a diff of .vcproj files:
	         The Arke version...
	         
	            includes _USRDLL;SQLITE337_EXPORTS
	            UsePrecompiledHeader="0"
	            NO MODULE DEFINITION FILE, hrmm
	               (only in my project)
                  <Tool
				         Name="VCLibrarianTool"
				         ModuleDefinitionFile="sqlite3.def"
			         />
	            
	            (only in Arke project)
           	Name="VCLinkerTool"
				OutputFile="$(OutDir)/Sqlite3.dll"
				LinkIncremental="1"
				ModuleDefinitionFile="sqlite3.def"
				GenerateDebugInformation="true"
				SubSystem="2"
				OptimizeReferences="2"
				EnableCOMDATFolding="2"
				ImportLibrary="$(OutDir)/Sqlite-3.3.7.lib"
				TargetMachine="1"

               Arke release target:
                  NDEBUG
                  UsePrecompiledHeader="0"

         <Tool
				Name="VCLinkerTool"
				OutputFile="$(OutDir)/Sqlite3.dll"
				LinkIncremental="1"
				ModuleDefinitionFile="sqlite3.def"
				GenerateDebugInformation="true"
				SubSystem="2"
				OptimizeReferences="2"
				EnableCOMDATFolding="2"
				ImportLibrary="$(OutDir)/Sqlite-3.3.7.lib"
				TargetMachine="1"
			/>
			
		---
		started over
		
         created a new win32 console project
         under advanced options, change to a static lib and remove precompiled header
         add the project files
         add NO_TCL (_LIB should already be there)
         changed runtime library (from DLL to non-DLL)		
         added module definition file
         
      That did it!

      here are the only remaining differences (in release build only)
      I don't think they matter:
				Name="VCLinkerTool"
				OutputFile="$(OutDir)/Sqlite3.dll"
				LinkIncremental="1"
				GenerateDebugInformation="true"
				SubSystem="2"
				OptimizeReferences="2"
				EnableCOMDATFolding="2"
				ImportLibrary="$(OutDir)/Sqlite-3.3.7.lib"
				TargetMachine="1"

      excellent.  get it organized.

         everything will go here:      
            Reusable\sqlite

         NOTE: Last updated for sqlite-source-3_3_13.

         Steps to use sqlite in your project:
         ------------------------------------
         1) Open Reusable\sqlite\SQLite_Static_Library\SQLite_Static_Library.sln and build the Release configuration.
         2) Then, all you will need in projects is what is in the [Reusable\sqlite] dir:

               CppSQLite3.h
               CppSQLite3.cpp
               SQLite_Static_Library.lib
               
            Add the CppSQLite3.* files to your project, and add the library:
               Project Properties->Config->Linker->Input->Additional Dependencies->[Reusable\sqlite\SQLite_Static_Library.lib]
               
         3) Write some code!

         You will also need Reusable\sqlite\sqlite-source\sqlite3.h
         but it is included in CppSQLite3.cpp, so no need to mess with it.

         other files in that directory are...

            sqlite-source           the Windows-preprocessed "Source Code" from here: 
                                          http://sqlite.org/sqlite-source-3_3_13.zip
                                          
            sqlite-Windows-DLL      includes the sqlite3.def file (so we only export what's needed), from "Precompiled Binaries For Windows" found here:
                                          http://sqlite.org/sqlitedll-3_3_13.zip
            
            SQLite_Static_Library   the actual static lib project, takes the source and makes a lib
                                    Once you build the release configuration, you'll have the lib Reusable\sqlite\SQLite_Static_Library.lib
            
         need to...
            update project to use new paths
            x  path to code
            x  path to .def file
            x  path to release lib output file
            x  HTDJ path to lib
                  NO, don't use a path - instead add to the project lib paths
                  Nah, add a path, makes things easier, since it will always be there (for me)
            -  HTDJ path to CppSQLite.*
                  already good
            x  CppSQLite path to sqlite3.h
                  NO, add the path to the project include paths
                     Project Properties->Config->Resources->General->Addl Include Dirs->[../Reusable/sqlite/sqlite-source]
                  NO, change the CppSQLite path - this makes project integration easier!
               
            test!
			      		
      now post...
      well, crap, I posted to codeproject and sqlite and now realize i DID NOT succeed in a static compile!
         (it still asks for DLL)
      
      trying to fix...
      
      1) do NOT use .def file, this switches to an import lib!!
      2) get the runtime libs matched up and you should be good
      
      all that's left is the name mangling problem.  find some docs!
      
      this block prevents name mangling:
      
         #ifdef __cplusplus 
         extern "C" {
         #endif
             /* ... */
         #ifdef __cplusplus
         }
         #endif      

      now how can i do that without touching the sqlite source?
         nothing's wrong with the sqlite source!
         it's the caller that needs to not use name mangling 
         
      and there was nothing wrong with the caller!  i was running the release version of HTDJ, not debug, FUCKING DOH!
      you DO need to build a debug and release version of the libraries to match the HTDJ builds
      
      now get that posted code updated and get on with your life!  whoop!  :>
      
      ---
      
      got my first response, asking about all the warnings.
         fix 'em!
         
         this is a big one:
            _CRT_SECURE_NO_WARNINGS
            
         this disables warnings by type:
            /wdn
            
         there are also project settings, here:
            Project->Properties->C/C++->Advanced->Disable Specific Warnings
            
         which ones do i want to kill...
         
            warning C4267: 'function' : conversion from 'size_t' to 'int', possible loss of data
            warning C4244: 'function' : conversion from 'i64' to 'int', possible loss of data
            warning C4018: '>' : signed/unsigned mismatch
            warning C4311: 'type cast' : pointer truncation from 'HANDLE' to 'int'
            warning C4996: 'isatty'(etc.): The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _isatty(etc.). See online help for details.
            warning C4312: 'type cast' : conversion from 'int' to 'char *' of greater size
            warning C4311: 'type cast' : pointer truncation from 'char *' to 'int'
            
         done.  compile result: 
            SQLite_Static_Library - 0 error(s), 0 warning(s)
      
         posting new files.
         
//---------------------------------------------------------------------------------------------------//
//	^ DONE ^
//	v TODO v
//---------------------------------------------------------------------------------------------------//

															***********************
															 SQLite_Static_Library
															***********************
